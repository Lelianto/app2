Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Module Federation For Next.js\n====================================\n\nThis plugin enables Module Federation on Next.js\n\nThis is a workaround to hard limitations caused by Next.js being synchronous.\n\nI am working on an update to Webpack Core which will circumvent projects with older architecture (like Next.js).\n\nThis is a stable and viable workaround to leverage Module Federation [until this issue is resolved](https://github.com/webpack/webpack/issues/11811).\n\n**Once I PR webpack, this workaround will no longer be required.**\n\n## How to use it\n\n1. Use `withModuleFederation` in your `next.config.js`\n\n```js\n// next.config.js\nconst { withModuleFederation } = require(\"@module-federation/nextjs-with-module-federation\");\n\nmodule.exports = {\n  webpack: (config, options) => {\n    const { buildId, dev, isServer, defaultLoaders, webpack } = options;\n    const mfConf = {\n      name: \"next2\",\n      library: { type: config.output.libraryTarget, name: \"next2\" },\n      filename: \"static/runtime/remoteEntry.js\",\n      remotes: {\n        // For SSR, resolve to disk path (or you can use code streaming if you have access)\n        next1: isServer\n          ? path.resolve(\n              __dirname,\n              \"../next1/.next/server/static/runtime/remoteEntry.js\"\n            )\n          : \"next1\", // for client, treat it as a global\n      },\n      exposes: {\n        \"./nav\": \"./components/nav\",\n      },\n      shared: [\"lodash\"],\n    };\n    // Configures ModuleFederation and other Webpack properties\n    withFederation(config, options, mfConf);\n\n    if (!isServer) {\n      config.output.publicPath = \"http://localhost:3001/_next/\";\n    }\n\n    return config;\n  },\n};\n```\n\n2. Add the `sharePatch` to `_document.js`. This will solve the react sharing issue.\n\n```jsx\nimport Document, { Html, Head, Main, NextScript } from \"next/document\";\nimport { sharePatch } from \"@module-federation/nextjs-with-module-federation\";\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const initialProps = await Document.getInitialProps(ctx);\n    return { ...initialProps };\n  }\n\n  render() {\n    return (\n      <Html>\n        {sharePatch()}\n        <script src=\"http://localhost:3000/_next/static/chunks/webpack.js\" />\n        <script src=\"http://localhost:3000/_next/static/runtime/remoteEntry.js\" />\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n```\n\n3. Use top-level-await\n\n```js\n// some-component.js\nconst Nav = (await import(\"../components/nav\")).default;\nconst _ = await import(\"lodash\");\n```\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(revision aca7c3c209166fdc85695ccf6d5e72db344e1355)
+++ README.md	(date 1603586154654)
@@ -52,11 +52,11 @@
 };
 ```
 
-2. Add the `sharePatch` to `_document.js`. This will solve the react sharing issue.
+2. Add the `patchSharing` to `_document.js`. This will solve the react sharing issue.
 
 ```jsx
 import Document, { Html, Head, Main, NextScript } from "next/document";
-import { sharePatch } from "@module-federation/nextjs-with-module-federation";
+import { patchSharing } from "@module-federation/nextjs-with-module-federation";
 
 class MyDocument extends Document {
   static async getInitialProps(ctx) {
@@ -67,7 +67,7 @@
   render() {
     return (
       <Html>
-        {sharePatch()}
+        {patchSharing()}
         <script src="http://localhost:3000/_next/static/chunks/webpack.js" />
         <script src="http://localhost:3000/_next/static/runtime/remoteEntry.js" />
         <Head />
